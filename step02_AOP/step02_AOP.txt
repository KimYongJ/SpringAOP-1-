[학습]
1. AOP Aspect Oriented Programming
	- 관점 지향 프로그래밍
	- 공통 기능을 분리하여 모듈화하여 지정 시점에 해당 로직이 실행하게 함
	
	- Advice
		- 공통 기능의 코드, 메소드
		- 핵심 로직과 관련된 전처리 혹은 후처리에 대한 부분은 AOP가 담당한다. 
		- 동작 시점 
			Befor : 메소드 실행 전에 동작
			After : 메소드 실행 후에 동작
			After-returning : 메소드가 정상적으로 실행된 후에 동작
			After-throwing : 예외가 발생한 후에 동작
			Around : 메소드 호출 이전, 이후, 예외발생 등 모든 시점에서 동작
				   예시 )  <aop:config> <!-- 어떤 메소드를 어느 시점에 실행 할지 정해준다 -->
							<aop:pointcut expression="execution(* com.spring.aop.Car.buy*(..))" id="buyLogic"/>
							<aop:pointcut expression="execution(* com.spring.aop.Car.sell*(..))" id="sellLogic"/>
							<aop:aspect ref="common">
								<aop:before method="noticeBuyStart" pointcut-ref="buyLogic"/>
							</aop:aspect>
						</aop:config>
	- Joinpoint
		- Advice 적용 위치 및 시점
		
	- Pointcut ★중요★
		- 특정 조건에 의해 필터링된 조인포인트
		- execution([수식어] 리턴타입 [클래스이름].이름(파라미터)) 
			execution(public String com.spring.aop.*.*(*))= 해설 : com.spring.aop 패키지에 속해 있고, 파라미터가 1개인 모든 메소드(파라미터에*아스타가 들어가면)를 의미 
			execution(* com.spring..*.get*(..)) = 해설 : com.spring까지만 접근하여 해당 패키지 혹은 하위 패키지에 속해 있고, get으로 시작하는 0개 이상(파라미터자리에 ..[점2개]가 들어가므로)인 모든 메소드를 의미한다. 
			execution(* com.spring.spring..*Service.*(..)) = 해설 : com.spring.spring 패키지 혹은 하위 패키지에 속해있고, Service로 끝나는 파라미터가 0개 이상(파라미터자리에 ..[점2개]가 들어가므로)인 모든 메소드 
				예시 ) <aop:pointcut expression="execution(* com.spring.aop.Car.buy*(..))" id="buyLogic"/>
				예시 ) <aop:pointcut expression="execution(* com.spring.aop.Car.sell*(..))" id="sellLogic"/>
		- within(타입패턴)
			within(com.spring.aop.SomeService) = 해설 : com.spring.aop.SomeService 인터페이스의 모든 메소드를 의미 한다.
			within(com.spring.aop.*) = 해설 : com.spring.aop(뒤에 *아스타가 붙기 때문에) 패키지에 모든 메소드 의미 한다.
			within(com.spring.aop..*) = 해설 :com.spring.aop 패키지 혹은 하위 패키지에 모든 메소드를 의미 한다.
	
	- Weaving
		- AOP Framework가 공통 코드를 핵심 코드에 삽입하는 것 , AOP사용시 반드시 Weaving이 들어가야 한다.
		ex) AspectJ, Spring AOP, ...

	- Aspect
		- 위에서 설명한 Pointcut과  Advice가 합쳐진것 이다.
		- Aspect = Pointcut + Advice	
	
	- Annotations
		@Aspect	: AOP로 정의하는 클래스 지정
		@Pointcut : 메소드, Annotation 등 적용 지점 설정
		@Before	: 메소드 실행 전
		@After : 메소드 성공 실행 후(예외 발생 되더라도 실행)
		@AfterReturning : 메소드가 정상적으로 종료
		@AfterThrowing : 메소드에서 예외가 발생
		@Around : Before + After 모두 제어 (에외 발생 되더라도 실행)


[실습]
1. 자동차 구매(buy), 판매(sell)
2. 공통 로직 
	- 구매하는 로직에만 공지사항을 등록  ( xml 설정 파일에서 등록  )
	
*** 핵심 로직과 관련된 전처리 혹은 후처리에 대한 부분은 AOP가 담당한다. 